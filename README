20/01/2018 :
	Reprise du code
	
	Plugin Loader :
		Continué la fonction pour verifier la validité d'un dossier plugin
		Ajout des fonctions de chargement des effets

	EffectConfig :
		Ajout de l'objet statique InvalidConfig
		Surcharge de l'operateur ==

21/01/2018 :
	Recommencé le système de plugins à zéro

	Plugin.h  :
		Creation de la class Plugin qui remplacera UnitFactory::UnitFactoryReg

	AbstractEffectUnit.h :
		Ajout du fichier depuis les sources anciennes

		retrait des constantes comunes à tout les effets, bypass et volume
		retrait des fonction set et get bypass
		retrait de la constante de serveur par défault, sera migré vers un fichier config

	JACKUnit.h :
		Ajout du fichier depuis les sources anciennes

		Modification de la gestion du nombre de port, gestion désormais en interne

22/01/2018 :

	Plugin.h :
		amélioré la doc des fonction register
		Register name renvois une erreur si le nom donné est vide
		Register destructor et register builder renvoient une erreur si les pointeurs sont nulls

		ajouté Register library handle pour sauvegarder le pointeur vers le handle de la librarie associée au plugin
			utilisé pour décharger correctement le plugin

		Changé les getters des builders et destructeurs en appels direct des fonctions

		ajouté la taille de la pool aux données à charger depuis le xml

	PluginConfigLoader.h :
		creation du namespace PluginConfigLoader contenant les fonction pour charger un plugin

	Drive.h :
		Portage de l'effet drive depuis l'ancienne version du programme vers un module chargeable dynamiquement

	JACKUnit.h :
		Changé la gestion des ports, passé d'un table contenant tout les ports les uns a la suite des autres à un tableau à deux dimensions

	Restructuration des fichiers pour transformer les classes Plugin AbstractEffectUnit et JACKUnit en librairie :

	Refonte des makefile et de la gestion des includes, plus de chemins absoluts -> beaucoup plus clair
	Plugin, AbstractEffectUnit et JACKUUnit sont maintenant des librairies partagées pour la compatibilité entre les plugins d'effets et le programme

30/01/2018 :

	EffectFactory.h :
		Creation de la classe EffectFactory qui contiens la map<TypeCode, Plugin> representant la table TC complètement chargée

	TypeCodeTable.h :
		Creation de la classe TCTLoader qui contiens les fonction pour charger le fichier TypeCodeTable.xml contenant la liste des repertoires
			des plugins à charger
		
	PluginConfigLoader.h :
		Amelioration de la fonction loadPlugin avec un try/catch pour gerer les erreurs de chargement et arreter le chargement en cas d'echec

31/01/2018 :

	ProcessGraph.h :
		Debut du port du process graph vers la nouvelle version du programme
		Toujours un prolème de structure pour la gestion des ports des effets

02/02/2018 :
	
	ProcessGraph.h : 
		Fini le portage du process graph vers la nouvelle version du programe
		Ajout de la fonction print pour afficher le graph dans un ostream

	EffectFactory.h :
		Ajout de la fonction print pour afficher la liste des effets disponibles dans un ostream

	TypeCodeTable :
		Déplacé les fichiers vers lib, transformé en librairie statique

	Const.h :
		Redéfini les types propres au programme pour les rendre plus compatibles avec les fonction builtin
			uint8_t    -> unsigned short int
			uint16_t -> unsigned int
			uint32_t -> unsigned long
		
03/02/2018 :
	
	EffectPrototype.h :
		Creation de la classe effect prototype pour creer un objet commun aux programmes SFXPi et SFXPE
		Contient toutes les informations propres à un effet : 
			ID
			Type
			Nombre de Banques
			Taille d'une Banque
			Pour chaque banque :
				ID de la banque
				Paramètres de la banque

	AbstractEffectUnit.h :
		Modifié la classe pour la faire hériter de la classe EffectPrototype.

	PresetParser.h :
		Creation du fichier
		Portage des fonctions de chargement d'effets vers le nouveau parser

	Connection.h :
		Deplacement de la struct connection vers un fichier independant du process graph

	Preset.h :
		Creation de l'objet preset qui sera partagé entre SFXPi et SFXPE pour representer les informations chargées depuis un
			fichier preset
		La conversion sera faite grace a des fonctions propres à Pi et PE pour recuperer les informations stoquées par un objet preset

	Début du protage du système de commandes vers la nouvelle version du programe :

		Commands.h :
			Pas de modofications necessairesmkdir 

		CommandListener.h :
			Suppression de la superclasse AbstractListener

		CommandFactory.h :
			Renomé le fichier command parser en command factory, retiré le systeme d'alias par des ids pour les commandes car inutilisé

		CommandSequencer :
			Modifié les fonctions push notifications et performAction pour rendre la classe command sequencer independante de la classe
				CommandParser ( CommandFactory )

	Fini le portage du systeme de commandes, pret pour porter la liste de toutes les commandes implémentées

	SFXPi.cc :
		Portage du main vers la nouvelle version du programme

04/02/2018 :
	
	Portage de l'UIManager et de tout les io :
		
		LED et FootSwhitche :
			pas de modifications necessaires


	Division du fichier PluginConfigLoader en deux fichier, un pour charger le ficher configuration xml, partagé entre Pi et PE
		le deuxième pour charger le fichier source
		Les fonctions load et unloadPlugin ont été déplacées vers le fichier EffectFactory

	Preset.h :
		Ajout des objets CommandSequencer, et Footswitches à l'objet preset

	PresetParser : 
		Fini le portage de l'ancienne vers la nouvelle version

12/02/2018 :
	
	Commencement de la modification des Managers pour travailler avec des objets preset

13/02/2018 :

	Commencement de la mise au point de l'architecture finale du software SFX-Pi
	Commencement du portage vers la version finale de l'architecture

	Event.h : 
		Creation de la struct Event pour les messages internes au programme

	AbstractHandler.h : 
		Creation de la classe de base des Handlers, objets qui remplaceront les managers

	PresetHandler.h :
		Creation du presetHandler qui s'occupera de gerer le preset courrant et charger les presets

15/02/2018 :
	
	Avancé le portage vers l'architecture finale, portage du process graph vers sa nouvelle forme : EffectHandler
	
18/02/2018 :
	
	Portage des commandes vers l'architecture finale
	Correction d'un bug au chargement des preset, du a un mauvais cast des chaines de caractère vers des strings

19/02/2018 :

	Portage des CommandSequencers devenus les EventSequencers vers l'architecture finale
	Mise a jour du parser de preset pour sauvegarder des events et des EventSequencers
	Présence d'un bug à la destruction des effect unit, probablement du à des pb de version des fichiers compilés
	Une recompilation complète à fait disparaitre le bug

20/02/2018 :
	
	Correction d'un bug à la fermeture du programme du à un mauvais ordre dans la desconstruction des Handlers
	Correction d'un bug à l'affichage de la liste des plugins chargés
	Mise a jour de la liste des evenements pour permettre l'affichage des effets / sequenceurs

	TODO : Porter les sorties et entrées digitales et analogiques et le noyau du programme sera complet

22/02/2018 :
	
	Fini le portage des entrées et sorties logiques sur mcp23017, changement de tableaux à deux dimensions vers un tableu à une ligne
	La configuration des io se fait maintenant via le fichier LogicConfig.xml
	Correction d'un bug à la lecture des registre du à un mauvais index

23/02/2018 : 

	!!! Fini le noyau du programme principal :) !!!
	TODO :
		Events pour modifier dynamiquement l'analog handler
		Events pour ajouter dynamiquement des events aux EventSequencers
		Differentiation des Handler Critiques ( absolument necessaires ) et non critiques
		Mise a jour de tout les cout<< pour suivre le nouveau formatage du log
		Portage de tout les effets vers le nouveau systeme de plugin

12/03/2018 :

	Début du portage du noyau vers Qt pour unifier SFX-Pi et SFX-PE

	Ajout d'instructions préprocesseur pour l'AnalogHandler pour les librairies WiringPi et mcp3004